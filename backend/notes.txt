Design Overview

1. Horizontal scaling
    The backend is designed to be stateless. All shared data (jobs, queues, agent state) is stored in a centralized in-memory module for now. This module can later be replaced by a proper Redis or database implementation to support true horizontal scaling in a distributed system.

        - Each backend instance reads and writes to the shared queue/storage layer.
        - Internal logic assumes no instance-specific memory; all state is centralized.

2. Job Submission, Grouping, and assignment
    The system follows a multi-stage pipeline to process incoming jobs:

    Stage 1: Job Submission (Initial Storage)
        - All jobs submitted via the CLI are validated and pushed to a global job store.
        - Jobs are then grouped using a composite key: {org_id}|{app_version_id}.

    Stage 2: Grouped Job Store
        - Jobs with the same app version and organization are grouped together to reduce setup redundancy.
        - Grouping happens immediately at the time of submission.
        - A separate priority queue tracks which groups are ready for agent assignment, based on priority and arrival time.

    Stage 3: Ready Queue (Priority Queue)
        - Each group is represented as a single entry in the priority queue.
        - Groups are dequeued in order of priority and assigned to agents.
        - If a group key is already being processed by an agent, additional jobs for the same group are routed to that agentâ€™s internal queue.